# bip default config file.
# Thou shoult change thy password

# Default values are commented out.

# Listening IP address. This is the IP address bip will listen for incoming
# client connections.
#ip = "0.0.0.0";

# To connect a client to bip, try the port below, and
# be sure to set the password to the value
# specified in the network you want to connect to.
# Port is 7778 by default.
#port = 7778;

# If you set this to true, you'll only be able to connect to bip
# with a SSL capable IRC client. Be sure to generate a certificate
# for bip using scripts/bipgenconfig.
#client_side_ssl = false;

# This is the file containing the SSL cert/key pair bip'll use to
# serve SSL clients. If unset, it defaults to <bipdir>/bip.pem
# Supply at least 2048-bit parameters, for example using openssl:
# openssl dhparam -out dh.pem 2048;
#client_side_ssl_pem = "<bipdir>/bip.pem";

# OpenSSL cipher lists used with SSL client connections.
# If not set, OpenSSL default ciphers will be used. See OpenSSL ciphers
# command. An example value: "ECDHE-RSA-AES128-GCM-SHA256".
#client_side_ciphers = ;

# DH parameters bip'll use when serving SSL clients.
# Supply at least 2048-bit parameters, for example using openssl:
# openssl dhparam -out dh.pem 2048;
#client_side_dh_param = "<bipdir>/dh.pem";

# Default OpenSSL cipher lists used with outgoing connections to IRC servers.
# If not set, OpenSSL default ciphers will be used. See OpenSSL ciphers
# command. An example value: "ECDHE-RSA-AES128-GCM-SHA256".
# If not set, OpenSSL default ciphers will be used.
#ssl_default_ciphers = ;

# Define where the pidfile should be stored. Defaults to <bipdir>/bip.pid.
#pid_file="";

# Defaults to false, whether to write oidentd.conf files (see below).
#write_oidentd = true;

# Defaults to <bipdir>/.oidentd.conf
#oidentd_file="";

# Set to false and uncomment this line to disable logging and backlogging.
#log = true;

# Define bip's log level :
# 0 : only fatal errors
# 1 : add others errors
# 2 : add warnings
# 3 : add info messages
# 4 : add debug messages
#log_level = 3;

# This is where logs go. Channel and private messages will use that
# configuration value as a prefix, and then log_format to determine
# full log filename. Defaults to <bipdir>/logs.
#log_root = "";

# Set to false and uncomment this line to disable bip's internal messages
# logging. This is not recommended, a better option is to reduce log_level.
#log_system = true;

# Log format allows you to make log filenames depend on the log line's
# attributes. Here's a list :
# %u -> username
# %n -> network name
# %Y -> 4 digit year
# %m -> 2 digit month
# %d -> 2 digit day
# %h -> 2 digit hour of the day
# %c -> destination (#chan, nick, ...)
#log_format = "%u/%n/%Y-%m/%c.%d.log";

# Sets the frequency (in seconds) of log syncing (real write to kernel)
#log_sync_interval = 5;

# Sets the initial delay (in seconds) before a reconnection attempt.
# The delay increases with the number of attempts:
# delay = reconn_timer * number of attempts
#reconn_timer = 120;

# Network definition, a name and server info
#network {
#	name = "iiens";
#	server { host = "irc.iiens.net"; port = 6667; };
#};

#network {
#	name = "oftc";
#	server { host = "irc.oftc.net"; port = 6667; };
#	server { host = "other.oftc.server"; port = 6667; };
#};

# SSL network sample. SSL is per-network option, not per-server !
#network {
#	name = "oftcs";
#	ssl = true;
#	server { host = "ircs.oftc.net"; port = 9999; };
#};

# Configuration example with one user who connects to two irc networks
# To use the multi-server feature:
#  - define the connections
#  - chose and setup a different login for each connection
# on your irc client:
#  - Use the multi server feature of your client, the server being each time
#    the server where bip is running. In your client setup server password to:
#      username:password:connectionname
#  - do not store the password in clear here, use the bipmkpw util to generate
#    a hash

# User structure is grouping information for a given user
#user {
	# The name in bip of the user, required. This is used by bip only.
	#name = ;
	# This user's password (md5(md5("tata"))) with seed - generated by
	# bipmkpw, for example: "3880f2b39b3b9cb507b052b695d2680859bfc327".
	#password = ;

	# Set this to true if you want this user to have admin privileges on
	# bip. User will be able to RELOAD bip and see all users' configuration
	# (except pass).
	#admin = false;

	# When bip_use_notice is true, bip will send internal messages like
	# disconnection notifications or /BIP commands replies as notices
	# instead of private messages. The default is false.
	#bip_use_notice = false;

	# SSL certificates checking mode for user:
	# - "none" to accept anything;
	# - "basic" to accept if the certificate is contained in the store;
	# In "basic" mode, encountered untrusted certificates can be added to
	# the store interactively by connecting a client and "trusting" them.
	# - "ca" to do a complete certificate chain checking with the objects
	# in the store below (you have to put in it every cert, CRL, up to the
	# root CA). You have to build your store manually, so you may prefer
	# using "basic" unless you're a crypto zealot...
	#ssl_check_mode = "none";

	# Location of the user's store for server SSL certificate check
	# In "basic" mode, that must point to a single file with all trusted
	# certs concatenated together (the interactive "trust" appends to this
	# file).
	# In "ca" mode, it can be either:
	# - a directory of a standard openssl store; you must put PEM objects
	# (certificates, CRLs...) with .pem extension and run `c_rehash .' in it
	# - a certificate bundle file containing one or more certificates in PEM
	# format, enclosed in BEGIN CERTIFICATE / END CERTIFICATE lines
	# - unspecified: in this case, bip will attempt to use the default
	# certificate store of the OpenSSL it is built against. This is the default.
	#ssl_check_store = "";

	# Some networks (OFTC at least) allow you to authenticate to nickserv
	# using client side certificates, see
	# http://www.oftc.net/oftc/NickServ/CertFP
	# This is where you put your user's certificate.
	# The default is not to use a certificate.
	#ssl_client_certfile = "";

	# These will be the default for each connections.
	#default_nick = ;
	#default_user = ;
	#default_realname = ;

	# Makes bip send the log of each channel and privates while
	# you were not connected to the proxy upon connection.
	#backlog = true;		# enable backlog
	#backlog_lines = 10;	# number of lines in backlog, 0 means no limit

	# When true, backlog even lines already backlogged, do not reset backlog
	# when no client attached anymore.
	#backlog_always = false;

	# "none", "time" or "datetime": disables time stamps, use time or datetime.
	#backlog_timestamp = "time";

	# This parameter is deprecated, use backlog_timestamp instead.
	#backlog_no_timestamp = false; # implies backlog_timestamp = "none";
	
	# If blreset_on_talk talking on an irc network has the same effect of
	# issuing /bip blreset <current window>, meaning that stuffed logged
	# before the command won't be read back on backlog.
	#backlog_reset_on_talk = false;

	# If you have backlog_reset_on_talk set to true, talking in a query
	# will reset the backlog for the query. Same goes for channel. With the
	# following option set to true, talking in a connection will reset the
	# whole connection. The backlog for the current network is reset.
	#backlog_reset_connection = false;
	
	# If bl_msg_only is true, only channel and private messages will be
	# backlogged upon the reconnection of a client. Default is false, thus
	# joins, parts, quits, nick changes, topic changes, ... are backlogged.
	#backlog_msg_only = false;


	# A user can have mutiple connections to irc networks.
	# define a connection:
	#connection {
        # used by bip only, required (for example: "oftc").
        #name = ;
		# which ircnet to connect to, required (for example: "oftc").
		#network = ;
		#log = false;		# disable or enable logging and backlogging for
							# the current connection. Overrides global
							# (top-level) log parameter.

		# You can define ssl_check_mode here, if you want a different
		# behavior than the one defined in the parent level ('user' section).
		#ssl_check_mode = "none";

		# If you have multiple IP addresses, you can set the one you
		# want bip to use here. This options is totally useless to people who
		# only have one IP address.
		#vhost = "";

		# When source_port is defined, bip will connect to the IRC
		# server from this port number. That means the IRC server will
		# see the socket coming from <your_ip>:source_port.
		#source_port = 10000;

		# These will be sent to the real server. Nick, user and realname are
		# required. Default values are defined at the parent level
		# (default_nick, default_user, default_realname).
		#nick = "othernick";
		#user = "otheruser";
		#realname = "otheruser";
		#password = "server password";

		#You can specify this field more than once. BIP will send the text as is to the server.
		#on_connect_send = "PRIVMSG NickServ :IDENTIFY nspassword";

		# Some options:
		#away_nick = "bip`away";
		# Away message to be set when no client is connected
		#no_client_away_msg = "Having life, knock again later";
		#follow_nick = false;
		#ignore_first_nick = false;

		#autojoin_on_kick = true;
		#ignore_server_capab = true;

		# Autojoined channels:
		#channel { name = "#bip"; }; # name is required.

		# Password protected channel
		#channel {
		#	name = "#elite_UnDeRgR0uNd";
		#	key = "sikiour";
		#};

		#another channel
		#channel {
		#	name = "#huge(28)_activity";
			# disable backlogging of this channel.
		#	backlog = false;
		#};
	#};

	# another connection (optional)
	#connection {
		#name = "iiens";	# used by bip only
		#network = "iiens";	# which ircnet to connect to

		# Some options:
		#away_nick = "bip`away";
		#follow_nick = true;
		#ignore_first_nick = true;

		# Autojoined channels:
		#channel { name = "#bip"; };
	#};
#};
